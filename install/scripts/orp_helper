#!/bin/bash
# OpenRepeater Project
# Aaron Crawford (N3MBH), Richard Neese (N4CNR), and Daniel Loranger (KG7PAR)
# Licended under GPL v2 or later

# This is a helper script for OpenRepeater. This script is primarily intended
# to extend the functionality of the of the ORP web user interface and allow it
# to execute specific system commands that it would not normally be able to
# perform due to security reasons in Linux. DO NOT INCLUDE commands in this
# script that a potential hacker could utilize to compromise the system if the
# web server were to be compromised. This script should be a delicate balance
# between needed functionality in the web interface and security. 

# NOTE: NO NEED TO PREFIX COMMANDS WITH SUDO AS THIS SCRIPT IS INTENDED TO BE RUN AS ROOT USING SUDO COMMAND

#outside support scripts
#source board_drivers_loader
###############################################################################
# DEFINE FUNCTIONS
###############################################################################


### DOCKER FUNCTIONS FOR CONTAINERIZED SETUP ###

function docker_svxlink_start {
	docker exec SVXLink systemctl start svxlink

	#svxlink_devices_permissions
	#systemctl start svxlink
	#svxlink_status

	echo "FAKE COMMAND 1 - to be replace with docker pass thru command."
}

function docker_svxlink_stop {
	echo "FAKE COMMAND 2 - to be replace with docker pass thru command."
}

function docker_svxlink_restart {
	echo "FAKE COMMAND 3 - to be replace with docker pass thru command."
}

function docker_svxlink_status {
	#systemctl is-active svxlink
	echo "FAKE COMMAND 4 - to be replace with docker pass thru command."
}



### SVXLINK FUNCTIONS ###
function display_help {
	echo "OPEN REPEATER HELPER"
	echo "This is a helper script for OpenRepeater. This script is primarily intended"
	echo "to extend the functionality of the of the ORP web user interface and allow it"
	echo "to execute specific system commands that it would not normally be able to"
	echo "perform due to security reasons in Linux."
	echo ""
	echo "USAGE: orp_helper [service] [option]"
	echo "[service] options:"
	echo "svxlink|system|info|www|audio|set_mixer|alsa|network|pty|gps|docker"
	echo "drivers"
}

function svxlink_disable {
	echo "SVXLink Disable"
	service svxlink stop
	systemctl disable svxlink.service
}

function svxlink_enable {
	echo "SVXLink Enable"
	systemctl enable svxlink.service
	service svxlink start
}

function svxlink_restart {
	svxlink_stop
	svxlink_gpio_down
	svxlink_gpio_up
	svxlink_start
}

function svxlink_stop {
	systemctl stop svxlink
	svxlink_status
}

function svxlink_start {
	svxlink_devices_permissions
	systemctl start svxlink
	svxlink_status
}

function svxlink_status {
	systemctl is-active svxlink
}

function svxlink_gpio_up {
	/usr/sbin/svxlink_gpio_up
	echo "GPIO Up"
}

function svxlink_gpio_down {
	/usr/sbin/svxlink_gpio_down
	echo "GPIO Down"
}

function svxlink_devices_permissions {
	/usr/sbin/svxlink_devices
	echo "Set Device Permissions"
}


### SYSTEM FUNCTIONS ###
function system_reboot {
	shutdown -r now
}

function system_shutdown {
	shutdown -h now
}

function system_uptime {
	uptime
}

function system_user {
	whoami
}


### AUDIO FUNCTIONS ###
function audio_inputs {
	arecord -l
}

function audio_outputs {
	aplay -l
}

function audio_version {
	cat /proc/asound/version 2>&1
}

# get detailed information from the arecord verbose dump by plughw (card) number, then filter it down to only return the "channels" detail
function audio_channels_in  {
    ((arecord -vvv -f dat /dev/null --duration=1 --device=plughw:$1,0) 2> >( grep  -PA 50 "(Hardware PCM card $1)"))| grep -Pa "(channels)"| grep -o '[0-9][0-9]*'
}

# get detailed information from the aplay verbose dump by plughw (card) number, then filter it down to only return the "channels" detail
function audio_channels_out  {
	((aplay -d 1 -t raw /dev/null -vvv --device=plughw:$1,0) 2> >( grep  -PA 50 "(Hardware PCM card $1)"))| grep -Pa "(channels)"| grep -o '[0-9][0-9]*'
}

function set_mixer {
	if [ -n "$3" ]; then
		amixer -c$3 set "$1" $2
	else
		amixer set "$1" $2
	fi
}

function alsamixer_backup {
	alsactl --file "$1" store
	chown www-data:www-data "$1"
}

function alsamixer_restore {
	alsactl --file "$1" restore
}


### NETWORK FUNCTIONS ###
function network_read {
	echo "Read Network Config for external parsing"
}

function network_write {
	echo "Write New Network Config"
}


### WEBSERVER FUNCTIONS ###
function www_stop {
	echo "Webserver / ORP GUI Stop"
	service nginx stop
}

function www_start {
	echo "Webserver / ORP GUI Start"
	service nginx start
}

function www_restart {
	echo "Webserver / ORP GUI Restart"
	service nginx restart
}

function www_disable {
	echo "Webserver / ORP GUI Disable"
	systemctl disable nginx
}

function www_enable {
	echo "Webserver / ORP GUI Enable"
	systemctl enable nginx
	service nginx restart
}



### INFO FUNCTIONS ###
function info_timezone {
	cat /etc/timezone
}

function info_cpu_type {
	cat /proc/cpuinfo | grep processor
}

function info_cpu_speed {
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
}

function info_cpu_load {
	{ head -n1 /proc/stat;sleep 0.2;head -n1 /proc/stat; } | awk '/^cpu /{u=$2-u;s=$4-s;i=$5-i;w=$6-w}END{print int(0.5+100*(u+s+w)/(u+s+i+w))}'
}

function info_cpu_temp {
	cat /sys/class/thermal/thermal_zone0/temp
}

function info_uptime {
	cat /proc/uptime
}

function info_memory_usage {
	cat /proc/meminfo
}

function info_disk_usage {
	df -T -l -BM -x tmpfs -x devtmpfs -x rootfs -x vfat
}

function info_os {
	uname -a
}



### SVXLINK PTY FUNCTIONS ###
function set_pty {
	if [ ! -d "$1" ] 
	then
		mkdir -p "$1"
		chown svxlink:svxlink "$1" -R
	fi
}

function send_pty {
	echo "$2" > "$1"
	echo "true"
}




### GPS FUNCTIONS ###
function gps_read {
	#Read a few sentences of GPS data and return first TPV sentence which is JSON string
	GPS_RESULT=$(gpspipe -w -n 5 | grep -m 1 TPV)
	echo $GPS_RESULT
}



### Hardware specific drivers ###
function drivers_prepare_services {
	# edit /lib/systemd/system/svxlink_gpio_setup.service to insert the new dependency
	# for the hardware preconfig script 
	prepare_svxlink_gpio_up
}

function drivers_ics_1x_v1 {
	# put in the desired contents
	load_drivers_pi_repeater_1x_v1
}

function drivers_ics_2x_v3 {
	load_drivers_pi_repeater_2x_v3
}

function drivers_ics_4x_v2 {
	load_drivers_pi_repeater_4x_v2
}

function drivers_ics_8x_v2 {
	load_drivers_pi_repeater_4x_v2
}

# TODO LIST
# Setting Timezone



###############################################################################
# READ COMMAND LINE OPTIONS AND EXECUTE (Calls Functions Above)
###############################################################################

while :; do
    case $1 in
        svxlink)
			if [ "$2" == "start" ]; then svxlink_start
			elif [ "$2" == "stop" ]; then svxlink_stop
			elif [ "$2" == "restart" ]; then svxlink_restart
			elif [ "$2" == "status" ]; then svxlink_status
			elif [ "$2" == "enable" ]; then svxlink_enable
			elif [ "$2" == "disable" ]; then svxlink_disable
			elif [ "$2" == "gpio_up" ]; then svxlink_gpio_up
			elif [ "$2" == "gpio_down" ]; then svxlink_gpio_down
			else echo "INVALID OPTION"; echo "USAGE: orp_helper svxlink (start|stop|restart|status|enable|disable|gpio_up|gpio_down)"
			fi
			exit;;
        system)
			if [ "$2" == "stop" ]; then system_shutdown
			elif [ "$2" == "restart" ]; then system_reboot
			elif [ "$2" == "uptime" ]; then system_uptime
			elif [ "$2" == "user" ]; then system_user
			else echo "INVALID OPTION"; echo "USAGE: orp_helper system (stop|restart|uptime|user)"
			fi
			exit;;
        info)
			if [ "$2" == "timezone" ]; then info_timezone
			elif [ "$2" == "cpu_type" ]; then info_cpu_type
			elif [ "$2" == "cpu_speed" ]; then info_cpu_speed
			elif [ "$2" == "cpu_load" ]; then info_cpu_load
			elif [ "$2" == "cpu_temp" ]; then info_cpu_temp
			elif [ "$2" == "uptime" ]; then info_uptime
			elif [ "$2" == "memory_usage" ]; then info_memory_usage
			elif [ "$2" == "disk_usage" ]; then info_disk_usage
			elif [ "$2" == "os" ]; then info_os
			else echo "INVALID OPTION"; echo "USAGE: orp_helper info (timezone|cpu_type|cpu_speed|cpu_load|cpu_temp|uptime|memory_usage|disk_usage|os)"
			fi
			exit;;
        www)
			if [ "$2" == "stop" ]; then www_stop
			elif [ "$2" == "start" ]; then www_start
			elif [ "$2" == "restart" ]; then www_restart
			elif [ "$2" == "disable" ]; then www_disable
			elif [ "$2" == "enable" ]; then www_enable
			else echo "INVALID OPTION"; echo "USAGE: orp_helper www (stop|start|restart|disable|enable)"
			fi
			exit;;
        audio)
			if [ "$2" == "inputs" ]; then audio_inputs
			elif [ "$2" == "outputs" ]; then audio_outputs
			elif [ "$2" == "channels_in" ]; then audio_channels_in $3
			elif [ "$2" == "channels_out" ]; then audio_channels_out $3
			elif [ "$2" == "version" ]; then audio_version
			else 
				echo "INVALID OPTION"; 
				echo "USAGE: orp_helper audio (inputs|outputs|channels_in <input plughw#>|channels_out <output plughw#>|version)";
				echo "EXAMPLE: orp_helper audio channels_in 0";
			fi
			exit;;
        set_mixer)
			if [[ -n "$2" && -n "$3" && -n "$4" ]]; then set_mixer "$2" "$3" "$4"
			elif [[ -n "$2" && -n "$3" ]]; then set_mixer "$2" "$3"
			else echo "INVALID OPTION"; echo "USAGE: orp_helper set_mixer (setting) (value) [OPTIONAL: device]"
			fi
			exit;;
        alsa)
			if [ "$2" == "backup" ]; then alsamixer_backup "$3"
			elif [ "$2" == "restore" ]; then alsamixer_restore "$3"
			else echo "INVALID OPTION"; echo "USAGE: orp_helper alsa (backup|restore) [path]"
			fi
			exit;;
        network)
			if [ "$2" == "read" ]; then network_read
			elif [ "$2" == "write" ]; then network_write
			else echo "INVALID OPTION"; echo "USAGE: orp_helper network (read|write)"
			fi
			exit;;
        pty)
			if [ "$2" == "set" ]; then set_pty "$3"
			elif [ "$2" == "send" ]; then send_pty "$3" "$4"
			else echo "INVALID OPTION"; echo "USAGE: orp_helper pty (set|send) [path] (option)"
			fi
			exit;;
        gps)
			if [ "$2" == "read" ]; then gps_read
			else echo "INVALID OPTION"; echo "USAGE: orp_helper gps (read)"
			fi
			exit;;

        docker)
			if [ "$2" == "svxlink_start" ]; then docker_svxlink_start
			elif [ "$2" == "svxlink_stop" ]; then docker_svxlink_stop
			elif [ "$2" == "svxlink_restart" ]; then docker_svxlink_restart
			elif [ "$2" == "svxlink_status" ]; then docker_svxlink_status
			else echo "INVALID OPTION"; echo "USAGE: orp_helper docker (svxlink_start|svxlink_stop|svxlink_restart|svxlink_status)"
			fi
			exit;;

			
		drivers)
			if [ "$2" == "1x_v1" ]; then drivers_ics_1x_v1
			elif [ "$2" == "2x_v3" ]; then drivers_ics_2x_v3
			elif [ "$2" == "4x_v2" ]; then drivers_ics_4x_v2
			elif [ "$2" == "8x_v2" ]; then drivers_ics_8x_v2
			else echo "INVALID OPTION"; echo "USAGE: orp_helper drivers <HW_TYPE (see script for options)>"
                        fi
			exit;;
			
        -h|-\?|--help|*)   # Display general help/info.
			display_help
			exit;;
    esac
done
