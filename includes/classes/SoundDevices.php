<?php
#####################################################################################################
# Sound Devices Class
#####################################################################################################

class SoundDevices {

    public $device_list;
    public $device_in_count = 0;
    public $device_out_count = 0;

	public function __construct() {
		$this->device_list = [];
		$this->device_in_count = 0;
		$this->device_out_count = 0;
	}


	###############################################
	# Main Device Processor
	###############################################

	public function get_device_list($output = 'array') {		
		$System = new System();
		$svxlinkBeginningStatus = $System->svxlink_status();

		// Kill svxlink so cards will be available to interrogate
		if ($svxlinkBeginningStatus == 'active') {
			$System->svxlink_state('stop');
		}

		// Get ALSA Version from System
		$version = $System->orp_helper_call('audio', 'version');

		// Capture Input Devices from System
		$arecord_results = $System->orp_helper_call('audio', 'inputs');
		
		// Capture Output Devices from System 
		$aplay_results = $System->orp_helper_call('audio', 'outputs');
				
		// Sanitize arecored & aplay results, make a single string with no line feeds
		$arecord_results_clean = trim(preg_replace('/\s+/', ' ', $arecord_results));
		$aplay_results_clean = trim(preg_replace('/\s+/', ' ', $aplay_results));

		// Break results into group strings
		preg_match_all("/card\s[0-9].*?.subdevice\s#[0-9]/",$arecord_results_clean,$input_dev_grps);
		preg_match_all("/card\s[0-9].*?.subdevice\s#[0-9]/",$aplay_results_clean,$output_dev_grps);
		
		$input_dev_grps = $input_dev_grps[0]; // Remove multidimensional array generated by preg_match_all
		$output_dev_grps = $output_dev_grps[0]; // Remove multidimensional array generated by preg_match_all
		

		### PROCESS INPUTS ###	
		// Loop through inputs and add to device array
		foreach($input_dev_grps as $index => $in_val) {
			preg_match('/card\s(.*?):/', $in_val, $in_cardnum);
			preg_match('/card\s.*?\[(.*?)\]/', $in_val, $in_label);
			preg_match('/card\s.*?\[.*?\].*?\[(.*?)\]/', $in_val, $in_type);
			$in_cardnum = $in_cardnum[1];
			$in_label = $in_label[1];
			$in_type = $in_type[1];
			
			// Get card(s) inputs
			$channel_in_results = $System->orp_helper_call('audio', 'channels_in ' . $in_cardnum);
					
			// Write Card Channels to Array
			for ($currChan = 0; $currChan < $channel_in_results; $currChan++) {
				switch ($channel_in_results) {
					case 1:
						$currChlLabel = 'Mono';
						break;
					case 2:
						if ($currChan == 0) { $currChlLabel = 'Left'; }
						if ($currChan == 1) { $currChlLabel = 'Right'; }
						break;
					default:
						$currChlLabel = 'Channel ' . ($currChan); // Offset from zero
				}

				$this->device_list[] = array(
					'card' => $in_cardnum,
					'label' => $in_label,
					'type' => $in_type,
					'direction' => "IN",
					'channel' => $currChan,
					'channel_label' => $currChlLabel
				);
				$this->device_in_count = $this->device_in_count++;
			}
			#$card++;
		}
		
		
		### PROCESS OUTPUTS ###
		//$card=0;
		// Loop through ouputs and add to device array
		foreach($output_dev_grps as $index => $out_val) {
			preg_match('/card\s(.*?):/', $out_val, $out_cardnum);
			preg_match('/card\s.*?\[(.*?)\]/', $out_val, $out_label);
			preg_match('/card\s.*?\[.*?\].*?\[(.*?)\]/', $out_val, $out_type);
			$out_cardnum = $out_cardnum[1];
			$out_label = $out_label[1];
			$out_type = $out_type[1];
			
			// Get card(s) inputs
			$channel_out_results = $System->orp_helper_call('audio', 'channels_out ' . $out_cardnum);
			
			// Write Card Channels to Array
			for ($currChan =0; $currChan < $channel_out_results; $currChan++) {
				switch ($channel_out_results) {
					case 1:
						$currChlLabel = 'Mono';
						break;
					case 2:
						if ($currChan == 0) { $currChlLabel = 'Left'; }
						if ($currChan == 1) { $currChlLabel = 'Right'; }
						break;
					default:
						$currChlLabel = 'Channel ' . ($currChan); // Offset from zero
				}

				$this->device_list[] = array(
					'card' => $out_cardnum,
					'label' => $out_label,
					'type' => $out_type,
					'direction' => "OUT",
					'channel' => $currChan,
					'channel_label' => $currChlLabel
				);
				$this->device_out_count = $this->device_out_count ++;
			}
		}

		
		// Restart SVXLink if previously running
		if ($svxlinkBeginningStatus == 'active') {
			$System->svxlink_state('start');
		}


		// Return results formated based on input.
		switch ($output) {
			case 'details':
				// Build Advance Details Results
				$audio_details = '<h4>Audio Input Devices</h4>';
				$audio_details .= '<pre>'.$arecord_results.'</pre>';
				$audio_details .= '<h4>Audio Output Devices</h4>';
				$audio_details .= '<pre>'.$aplay_results.'</pre>';
				$audio_details .= '<p>'.$version[0].'</p>';				
				return $audio_details;
				break;

			case 'JSON':
				return json_encode($this->device_list);
				break;

			default:
				return $this->device_list;
		}

	}


	###############################################
	# Return Counts
	###############################################

	public function get_device_in_count() {
		return $this->device_in_count;
	}


	public function get_device_out_count() {
		return $this->device_out_count;
	}

}